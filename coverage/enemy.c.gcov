        -:    0:Source:src/enemy.c
        -:    0:Programs:17
        -:    1:#include "everything.h"
        -:    2:
        -:    3:
        -:    4://struct NPC npcs[MAX_NPCS];
        -:    5:// Function to initialize an enemy with position and size
        2:    6:void initEnemy(struct Enemy* enemy, int x, int y, int width, int height, int health, int dmg, SDL_Texture* texture,int spawnLevel)
        -:    7:{
        2:    8:    enemy->x = x;
        2:    9:    enemy->y = y;
        2:   10:    enemy->width = width;
        2:   11:    enemy->height = height;
        2:   12:    enemy->health = health;
        2:   13:    enemy->dmg = dmg;
        2:   14:	enemy->texture = texture;
        2:   15:	enemy->spawnLevel = spawnLevel;
        2:   16:}
------------------
initEnemy:
        1:    6:void initEnemy(struct Enemy* enemy, int x, int y, int width, int height, int health, int dmg, SDL_Texture* texture,int spawnLevel)
        -:    7:{
        1:    8:    enemy->x = x;
        1:    9:    enemy->y = y;
        1:   10:    enemy->width = width;
        1:   11:    enemy->height = height;
        1:   12:    enemy->health = health;
        1:   13:    enemy->dmg = dmg;
        1:   14:	enemy->texture = texture;
        1:   15:	enemy->spawnLevel = spawnLevel;
        1:   16:}
------------------
initEnemy:
        1:    6:void initEnemy(struct Enemy* enemy, int x, int y, int width, int height, int health, int dmg, SDL_Texture* texture,int spawnLevel)
        -:    7:{
        1:    8:    enemy->x = x;
        1:    9:    enemy->y = y;
        1:   10:    enemy->width = width;
        1:   11:    enemy->height = height;
        1:   12:    enemy->health = health;
        1:   13:    enemy->dmg = dmg;
        1:   14:	enemy->texture = texture;
        1:   15:	enemy->spawnLevel = spawnLevel;
        1:   16:}
------------------
        -:   17://initialize an npc
       10:   18:void initNPC(struct NPC* npc, int x, int y,int width,int height, int xprevious, int yprevious, uint8_t face_dir, SDL_Texture* texture, int appearsOnLevel)
        -:   19:{
       10:   20:    npc->x = x;
       10:   21:    npc->y = y;
       10:   22:	npc->width = width;
       10:   23:	npc->height = height;
       10:   24:    npc->xprevious = xprevious;
       10:   25:    npc->yprevious = yprevious;
       10:   26:    npc->face_dir = face_dir;
       10:   27:    npc->texture = texture;
       10:   28:    npc->appearsOnLevel = appearsOnLevel;
       10:   29:}
------------------
initNPC:
        5:   18:void initNPC(struct NPC* npc, int x, int y,int width,int height, int xprevious, int yprevious, uint8_t face_dir, SDL_Texture* texture, int appearsOnLevel)
        -:   19:{
        5:   20:    npc->x = x;
        5:   21:    npc->y = y;
        5:   22:	npc->width = width;
        5:   23:	npc->height = height;
        5:   24:    npc->xprevious = xprevious;
        5:   25:    npc->yprevious = yprevious;
        5:   26:    npc->face_dir = face_dir;
        5:   27:    npc->texture = texture;
        5:   28:    npc->appearsOnLevel = appearsOnLevel;
        5:   29:}
------------------
initNPC:
        5:   18:void initNPC(struct NPC* npc, int x, int y,int width,int height, int xprevious, int yprevious, uint8_t face_dir, SDL_Texture* texture, int appearsOnLevel)
        -:   19:{
        5:   20:    npc->x = x;
        5:   21:    npc->y = y;
        5:   22:	npc->width = width;
        5:   23:	npc->height = height;
        5:   24:    npc->xprevious = xprevious;
        5:   25:    npc->yprevious = yprevious;
        5:   26:    npc->face_dir = face_dir;
        5:   27:    npc->texture = texture;
        5:   28:    npc->appearsOnLevel = appearsOnLevel;
        5:   29:}
------------------
        -:   30:// add an NPC reference to the npcs array
       10:   31:void addNPC(struct NPC* npc) 
        -:   32:{
       30:   33:    for (int i = 0; i < MAX_NPCS; i++) 
        -:   34:	{
       30:   35:        struct NPC* currentNPC = &npcs[i];
       30:   36:        if (currentNPC->appearsOnLevel <= 0)
        -:   37:		{
       10:   38:            *currentNPC = *npc; // Copy the contents of the passed NPC to the array
       10:   39:            return;
        -:   40:        }
        -:   41:    }
        -:   42:}
------------------
addNPC:
        5:   31:void addNPC(struct NPC* npc) 
        -:   32:{
       15:   33:    for (int i = 0; i < MAX_NPCS; i++) 
        -:   34:	{
       15:   35:        struct NPC* currentNPC = &npcs[i];
       15:   36:        if (currentNPC->appearsOnLevel <= 0)
        -:   37:		{
        5:   38:            *currentNPC = *npc; // Copy the contents of the passed NPC to the array
        5:   39:            return;
        -:   40:        }
        -:   41:    }
        -:   42:}
------------------
addNPC:
        5:   31:void addNPC(struct NPC* npc) 
        -:   32:{
       15:   33:    for (int i = 0; i < MAX_NPCS; i++) 
        -:   34:	{
       15:   35:        struct NPC* currentNPC = &npcs[i];
       15:   36:        if (currentNPC->appearsOnLevel <= 0)
        -:   37:		{
        5:   38:            *currentNPC = *npc; // Copy the contents of the passed NPC to the array
        5:   39:            return;
        -:   40:        }
        -:   41:    }
        -:   42:}
------------------
        -:   43:// Function to reset an enemy to its default state
    #####:   44:void resetEnemy(struct Enemy* enemy)
        -:   45:{
    #####:   46:    enemy->x = 0;
    #####:   47:    enemy->y = 0;
    #####:   48:    enemy->width = 0;
    #####:   49:    enemy->height = 0;
    #####:   50:    enemy->health = 0;
    #####:   51:    enemy->dmg = 0;
        -:   52:    // Add other attributes reset if needed
    #####:   53:}
------------------
resetEnemy:
    #####:   44:void resetEnemy(struct Enemy* enemy)
        -:   45:{
    #####:   46:    enemy->x = 0;
    #####:   47:    enemy->y = 0;
    #####:   48:    enemy->width = 0;
    #####:   49:    enemy->height = 0;
    #####:   50:    enemy->health = 0;
    #####:   51:    enemy->dmg = 0;
        -:   52:    // Add other attributes reset if needed
    #####:   53:}
------------------
resetEnemy:
    #####:   44:void resetEnemy(struct Enemy* enemy)
        -:   45:{
    #####:   46:    enemy->x = 0;
    #####:   47:    enemy->y = 0;
    #####:   48:    enemy->width = 0;
    #####:   49:    enemy->height = 0;
    #####:   50:    enemy->health = 0;
    #####:   51:    enemy->dmg = 0;
        -:   52:    // Add other attributes reset if needed
    #####:   53:}
------------------
        -:   54:// Function to add an enemy to the array
        -:   55://struct Enemy enemies[MAX_ENEMIES];
        -:   56:
        2:   57:void addEnemy(int x, int y, int width, int height, int health, int dmg, SDL_Texture* texture, int level)
        -:   58:{
       2*:   59:    for (int i = 0; i < MAX_ENEMIES; i++)
        -:   60:	{
        2:   61:        struct Enemy* currentEnemy = &enemies[i];
        2:   62:        if (currentEnemy->health <= 0)
        -:   63:		{
        2:   64:            initEnemy(currentEnemy, x, y, width, height, health, dmg, texture, level);
        2:   65:            return; // Exit the function after adding the enemy
        -:   66:        }
        -:   67:    }
        -:   68:    // If all slots are filled, you can handle this case as needed (e.g., ignore or overwrite)
        -:   69:}
------------------
addEnemy:
        1:   57:void addEnemy(int x, int y, int width, int height, int health, int dmg, SDL_Texture* texture, int level)
        -:   58:{
       1*:   59:    for (int i = 0; i < MAX_ENEMIES; i++)
        -:   60:	{
        1:   61:        struct Enemy* currentEnemy = &enemies[i];
        1:   62:        if (currentEnemy->health <= 0)
        -:   63:		{
        1:   64:            initEnemy(currentEnemy, x, y, width, height, health, dmg, texture, level);
        1:   65:            return; // Exit the function after adding the enemy
        -:   66:        }
        -:   67:    }
        -:   68:    // If all slots are filled, you can handle this case as needed (e.g., ignore or overwrite)
        -:   69:}
------------------
addEnemy:
        1:   57:void addEnemy(int x, int y, int width, int height, int health, int dmg, SDL_Texture* texture, int level)
        -:   58:{
       1*:   59:    for (int i = 0; i < MAX_ENEMIES; i++)
        -:   60:	{
        1:   61:        struct Enemy* currentEnemy = &enemies[i];
        1:   62:        if (currentEnemy->health <= 0)
        -:   63:		{
        1:   64:            initEnemy(currentEnemy, x, y, width, height, health, dmg, texture, level);
        1:   65:            return; // Exit the function after adding the enemy
        -:   66:        }
        -:   67:    }
        -:   68:    // If all slots are filled, you can handle this case as needed (e.g., ignore or overwrite)
        -:   69:}
------------------
       26:   70:void randomSpawnEnemy(int x, int y, int width, int height, int health, int dmg, SDL_Texture* texture, int level)
        -:   71:{
       26:   72:	int spawnChance = 25; //25% chance of enemy spawning
       26:   73:	srand((unsigned int)time(NULL));
       26:   74:	int randomValue = rand() % 100;
       26:   75:	if(randomValue<spawnChance)
        -:   76:	{
        2:   77:		addEnemy(x, y, width, height, health, dmg, texture, level);//size, stats and image to go with it.
        -:   78:	}
       26:   79:}
------------------
randomSpawnEnemy:
       13:   70:void randomSpawnEnemy(int x, int y, int width, int height, int health, int dmg, SDL_Texture* texture, int level)
        -:   71:{
       13:   72:	int spawnChance = 25; //25% chance of enemy spawning
       13:   73:	srand((unsigned int)time(NULL));
       13:   74:	int randomValue = rand() % 100;
       13:   75:	if(randomValue<spawnChance)
        -:   76:	{
        1:   77:		addEnemy(x, y, width, height, health, dmg, texture, level);//size, stats and image to go with it.
        -:   78:	}
       13:   79:}
------------------
randomSpawnEnemy:
       13:   70:void randomSpawnEnemy(int x, int y, int width, int height, int health, int dmg, SDL_Texture* texture, int level)
        -:   71:{
       13:   72:	int spawnChance = 25; //25% chance of enemy spawning
       13:   73:	srand((unsigned int)time(NULL));
       13:   74:	int randomValue = rand() % 100;
       13:   75:	if(randomValue<spawnChance)
        -:   76:	{
        1:   77:		addEnemy(x, y, width, height, health, dmg, texture, level);//size, stats and image to go with it.
        -:   78:	}
       13:   79:}
------------------
