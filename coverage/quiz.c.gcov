        -:    0:Source:src/quiz.c
        -:    0:Programs:17
        -:    1:#include "everything.h"
        -:    2:
        -:    3:#include <stdbool.h>
        -:    4:
        -:    5://quiz
        -:    6:// Define the quiz question and answers
        -:    7:const char* quizHeader = "INSERT NAME HERE";//Name of person we are talking to
        -:    8:const char* quizInfo = "";//"correct or false"
        -:    9:const char* quizInfoHolder ="";//does nothing currently
        -:   10:const char* quizQuestion = "What is the capital of France?";//default question
        -:   11:const char* answerA = "A) Paris";//default answer a
        -:   12:const char* answerB = "B) London";//default answer b
        -:   13:const char* answerC = "C) Berlin";//default answer c
        -:   14:int correctAnswer = 0;//current number relating to the correct answer.
        -:   15:int userAnswer = 0;//user input for the quiz (1,2,3), 0 is default.
        -:   16:bool quizOn = false;//if a quiz is active (rendering)
        -:   17:
        -:   18:int quizQNum = 1;//question counter for quiz (ends at 4 for three question quiz)
        -:   19:
        -:   20:bool quiz2Called = false;//boolean to see if the player has completed quiz 2 etc
        -:   21:bool quiz3Called = false;
        -:   22:bool quizLoopOn = false;//are we going through the quiz loop in main
        -:   23:int usedQuestions[100] = {0}; // Array to keep track of used question numbers (for random question)
        -:   24:int usedQuestionCount = 0;    // Variable to keep track of the number of used questions (so we dont get the same random question)
        -:   25:// Function to check if a question number has been used before
    #####:   26:int isQuestionUsed(int questionNumber) {
    #####:   27:    for (int i = 0; i < usedQuestionCount; i++)
        -:   28:	{
    #####:   29:        if (usedQuestions[i] == questionNumber)
        -:   30:		{
    #####:   31:            return 1; // Question number is already in the usedQuestions list
        -:   32:        }
        -:   33:    }
    #####:   34:    return 0; // Question number has not been used before
        -:   35:}
------------------
isQuestionUsed:
    #####:   26:int isQuestionUsed(int questionNumber) {
    #####:   27:    for (int i = 0; i < usedQuestionCount; i++)
        -:   28:	{
    #####:   29:        if (usedQuestions[i] == questionNumber)
        -:   30:		{
    #####:   31:            return 1; // Question number is already in the usedQuestions list
        -:   32:        }
        -:   33:    }
    #####:   34:    return 0; // Question number has not been used before
        -:   35:}
------------------
isQuestionUsed:
    #####:   26:int isQuestionUsed(int questionNumber) {
    #####:   27:    for (int i = 0; i < usedQuestionCount; i++)
        -:   28:	{
    #####:   29:        if (usedQuestions[i] == questionNumber)
        -:   30:		{
    #####:   31:            return 1; // Question number is already in the usedQuestions list
        -:   32:        }
        -:   33:    }
    #####:   34:    return 0; // Question number has not been used before
        -:   35:}
------------------
    #####:   36:void updateQuizDataFromRandomLine(const char *filename,const char **quizQuestion,const char **answerA,const char **answerB,const char **answerC,int *userAnswer,int *correctAnswer,const char **quizInfoHolder) 
        -:   37:{
    #####:   38:    FILE *file = fopen(filename, "r");
    #####:   39:    if (file == NULL) 
        -:   40:	{
    #####:   41:        printf("Error opening the file.\n");
    #####:   42:        return;
        -:   43:    }
        -:   44:
        -:   45:    // Count the number of lines in the file
    #####:   46:    int lineCount = 0;
        -:   47:    char ch;
    #####:   48:    while ((ch = fgetc(file)) != EOF) 
        -:   49:	{
    #####:   50:        if (ch == '\n') 
        -:   51:		{
    #####:   52:            lineCount++;
        -:   53:        }
        -:   54:    }
        -:   55:    // Reset the file pointer to the beginning
    #####:   56:    rewind(file);
        -:   57:
        -:   58:    // Generate a random line number
    #####:   59:    srand(time(NULL));
        -:   60:    int randomLine;
        -:   61:
        -:   62:    // Keep generating random line numbers until we get a line that hasn't been used before
        -:   63:    do
        -:   64:	{
    #####:   65:        randomLine = rand() % lineCount;
        -:   66:    }
    #####:   67:	while (isQuestionUsed(randomLine));
        -:   68:
        -:   69:    // Add the question number to the list of used questions
    #####:   70:    usedQuestions[usedQuestionCount] = randomLine;
    #####:   71:    usedQuestionCount++;
        -:   72:
        -:   73:    // Read and process lines until we reach the randomly selected line
        -:   74:    char line[1024];
    #####:   75:    for (int i = 0; i <= randomLine; i++) 
        -:   76:	{
    #####:   77:        if (fgets(line, sizeof(line), file))
        -:   78:		{
        -:   79:            char *token;
    #####:   80:            const char *delim = ";";
    #####:   81:            token = strtok(line, delim);
    #####:   82:            while (token != NULL)
        -:   83:			{
        -:   84:                char varName[256], varValue[768];
    #####:   85:                if (sscanf(token, "%[^=]=%[^\n]", varName, varValue) == 2)
        -:   86:				{
    #####:   87:                    if (strcmp(varName, "quizQuestion") == 0)
        -:   88:					{
    #####:   89:                        *quizQuestion = strdup(varValue);
        -:   90:                    }
    #####:   91:					else if (strcmp(varName, "answerA") == 0)
        -:   92:					{
    #####:   93:                        *answerA = strdup(varValue);
        -:   94:                    }
    #####:   95:					else if (strcmp(varName, "answerB") == 0)
        -:   96:					{
    #####:   97:                        *answerB = strdup(varValue);
        -:   98:                    }
    #####:   99:					else if (strcmp(varName, "answerC") == 0)
        -:  100:					{
    #####:  101:                        *answerC = strdup(varValue);
        -:  102:                    }
    #####:  103:					else if (strcmp(varName, "userAnswer") == 0)
        -:  104:					{
    #####:  105:                        *userAnswer = atoi(varValue);
        -:  106:                    }
    #####:  107:					else if (strcmp(varName, "correctAnswer") == 0)
        -:  108:					{
    #####:  109:                        *correctAnswer = atoi(varValue);
        -:  110:                    }
    #####:  111:					else if (strcmp(varName, "quizInfoHolder") == 0)
        -:  112:					{
    #####:  113:                        *quizInfoHolder = strdup(varValue);
        -:  114:                    } 
        -:  115:                }
    #####:  116:                token = strtok(NULL, delim);
        -:  117:            }
        -:  118:        }
        -:  119:    }
    #####:  120:    fclose(file);
        -:  121:}
        -:  122:
