        -:    0:Source:src/unittest.c
        -:    0:Programs:17
        -:    1:#include <stdio.h>
        -:    2:#include "main.h"
        -:    3:#include "everything.h"
        -:    4:
        -:    5:// Custom assertion function
    #####:    6:int assert_equal(int expected, int actual, const char *message)
        -:    7:{
    #####:    8:    if (expected == actual)
        -:    9:	{
    #####:   10:        printf("PASSED: %s\n", message);
    #####:   11:		return 0;
        -:   12:    }
        -:   13:	else
        -:   14:	{
    #####:   15:        printf("FAILED: %s (Expected: %d, Actual: %d)\n", message, expected, actual);
    #####:   16:		return 1;
        -:   17:    }
        -:   18:}
------------------
assert_equal:
    #####:    6:int assert_equal(int expected, int actual, const char *message)
        -:    7:{
    #####:    8:    if (expected == actual)
        -:    9:	{
    #####:   10:        printf("PASSED: %s\n", message);
    #####:   11:		return 0;
        -:   12:    }
        -:   13:	else
        -:   14:	{
    #####:   15:        printf("FAILED: %s (Expected: %d, Actual: %d)\n", message, expected, actual);
    #####:   16:		return 1;
        -:   17:    }
        -:   18:}
------------------
assert_equal:
    #####:    6:int assert_equal(int expected, int actual, const char *message)
        -:    7:{
    #####:    8:    if (expected == actual)
        -:    9:	{
    #####:   10:        printf("PASSED: %s\n", message);
    #####:   11:		return 0;
        -:   12:    }
        -:   13:	else
        -:   14:	{
    #####:   15:        printf("FAILED: %s (Expected: %d, Actual: %d)\n", message, expected, actual);
    #####:   16:		return 1;
        -:   17:    }
        -:   18:}
------------------
        -:   19:
        -:   20:// Test WaterParticles
    #####:   21:int test_WaterParticles()
        -:   22:{
        -:   23:	/*
        -:   24:	TODO: Be consistent; is it waterParticle, waterParticles, WaterParticle, or WaterParticles?
        -:   25:	*/
    #####:   26:	int ret = 0;
    #####:   27:	printf("Testing %i water particles:\n",MAX_WATER_PARTICLES);
        -:   28:    
        -:   29:	//Create some water particles.
    #####:   30:	rain_create();
        -:   31:	
        -:   32:	//Deactivate them.
    #####:   33:	deactivateAllWaterParticles();
    #####:   34:	for (int i = 0; i < MAX_WATER_PARTICLES; i++)
        -:   35:	{
    #####:   36:        ret = assert_equal(0, waterParticles[i].active, "deactivate WaterParticles");
        -:   37:    }
        -:   38:	
        -:   39:	//Activate them.
    #####:   40:    activateAllWaterParticles();
    #####:   41:	printf("Testing %i water particles:\n",MAX_WATER_PARTICLES);
    #####:   42:    for (int i = 0; i < MAX_WATER_PARTICLES; i++)
        -:   43:	{
    #####:   44:        ret = assert_equal(1, waterParticles[i].active, "activate WaterParticles");
        -:   45:    }
        -:   46:	
        -:   47:	//Clean up and return.
    #####:   48:	free(waterParticles);
    #####:   49:	return ret;
        -:   50:}
------------------
test_WaterParticles:
    #####:   21:int test_WaterParticles()
        -:   22:{
        -:   23:	/*
        -:   24:	TODO: Be consistent; is it waterParticle, waterParticles, WaterParticle, or WaterParticles?
        -:   25:	*/
    #####:   26:	int ret = 0;
    #####:   27:	printf("Testing %i water particles:\n",MAX_WATER_PARTICLES);
        -:   28:    
        -:   29:	//Create some water particles.
    #####:   30:	rain_create();
        -:   31:	
        -:   32:	//Deactivate them.
    #####:   33:	deactivateAllWaterParticles();
    #####:   34:	for (int i = 0; i < MAX_WATER_PARTICLES; i++)
        -:   35:	{
    #####:   36:        ret = assert_equal(0, waterParticles[i].active, "deactivate WaterParticles");
        -:   37:    }
        -:   38:	
        -:   39:	//Activate them.
    #####:   40:    activateAllWaterParticles();
    #####:   41:	printf("Testing %i water particles:\n",MAX_WATER_PARTICLES);
    #####:   42:    for (int i = 0; i < MAX_WATER_PARTICLES; i++)
        -:   43:	{
    #####:   44:        ret = assert_equal(1, waterParticles[i].active, "activate WaterParticles");
        -:   45:    }
        -:   46:	
        -:   47:	//Clean up and return.
    #####:   48:	free(waterParticles);
    #####:   49:	return ret;
        -:   50:}
------------------
test_WaterParticles:
    #####:   21:int test_WaterParticles()
        -:   22:{
        -:   23:	/*
        -:   24:	TODO: Be consistent; is it waterParticle, waterParticles, WaterParticle, or WaterParticles?
        -:   25:	*/
    #####:   26:	int ret = 0;
    #####:   27:	printf("Testing %i water particles:\n",MAX_WATER_PARTICLES);
        -:   28:    
        -:   29:	//Create some water particles.
    #####:   30:	rain_create();
        -:   31:	
        -:   32:	//Deactivate them.
    #####:   33:	deactivateAllWaterParticles();
    #####:   34:	for (int i = 0; i < MAX_WATER_PARTICLES; i++)
        -:   35:	{
    #####:   36:        ret = assert_equal(0, waterParticles[i].active, "deactivate WaterParticles");
        -:   37:    }
        -:   38:	
        -:   39:	//Activate them.
    #####:   40:    activateAllWaterParticles();
    #####:   41:	printf("Testing %i water particles:\n",MAX_WATER_PARTICLES);
    #####:   42:    for (int i = 0; i < MAX_WATER_PARTICLES; i++)
        -:   43:	{
    #####:   44:        ret = assert_equal(1, waterParticles[i].active, "activate WaterParticles");
        -:   45:    }
        -:   46:	
        -:   47:	//Clean up and return.
    #####:   48:	free(waterParticles);
    #####:   49:	return ret;
        -:   50:}
------------------
        -:   51://Perform all unit tests
    #####:   52:int unit_test_all()
        -:   53:{
        -:   54:	//Accumulate the number of failed unit tests.
        -:   55:	//If 0, then all unit tests passed.
        -:   56:	
    #####:   57:	int acc = 0;
    #####:   58:    acc += test_WaterParticles();
        -:   59:	//acc += ();
        -:   60:    //acc += ();
        -:   61:    //acc += ();
    #####:   62:    return acc;
        -:   63:}
